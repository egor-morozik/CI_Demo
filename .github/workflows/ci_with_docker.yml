name: CIDOCKER

on: 
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
      version:
        description: 'Version to deploy'
        required: false

jobs:
  test:
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        os: [ubuntu-latest]
        include:
          - python-version: '3.11'
            os: ubuntu-latest
            extra-label: "latest-ubuntu"
    
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8

      - name: Run tests with coverage
        run: |
          echo "Запускаем тесты..."
          set -o pipefail
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          python -m pytest --cov=app --cov-report=term --cov-report=html --cov-report=xml tests/ -v

      - name: Check coverage files
        run: |
          echo "Созданные файлы:"
          ls -la | grep -E "(htmlcov|coverage.xml)" || echo "Файлы покрытия не найдены"

      - name: Run lint
        run: |
          echo "Запускаем flake8..."
          flake8 . --max-line-length=120 --extend-ignore=E203,E501 || echo "Lint ошибки найдены"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            htmlcov/
            coverage.xml
          if-no-files-found: ignore

  docker-build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: vars
        run: echo "VERSION=${{ github.sha }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ env.VERSION }} .
          docker tag username/myapp:${{ env.VERSION }} ghcr.io/egor-morozik/ci_demo/myapp:${{ env.VERSION }}

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ env.VERSION }}

      - name: Push Docker image to GHCR
        run: docker push ghcr.io/${{ github.repository }}/myapp:${{ env.VERSION }}

